# -*- makefile -*-
# rules to patch the unpacked files in the source directory
# ---------------------------------------------------------------------------
# various rules to unpack addons and (un)apply patches.
# 	- patch / apply-patches
#	- unpatch / reverse-patches

.NOTPARALLEL:

patchdir	?= debian/patches
series_file	?= $(patchdir)/series

# which patches should be applied?

debian_patches = \
	git-updates \

#	git-updates \

ifneq ($(GFDL_INVARIANT_FREE),yes)
  debian_patches += \
	git-doc-updates \
	rename-info-files \

#	git-doc-updates \

else
endif
debian_patches += \
	gcc-gfdl-build

debian_patches += \
	gcc-textdomain \
	gcc-distro-specs \
	gcc-driver-extra-langs \
	gcc-hash-style-gnu \
	libstdc++-pic \
	libstdc++-doclink \
	libstdc++-man-3cxx \
	libstdc++-test-installed \
	alpha-no-ev4-directive \
	note-gnu-stack \
	libgomp-omp_h-multilib \
	libgo-testsuite \
	libgo-cleanfiles \
	gcc-target-include-asm \
	libgo-revert-timeout-exp \
	libgo-setcontext-config \
	gcc-auto-build \
	libitm-no-fortify-source \
	sparc64-biarch-long-double-128 \
	pr66368 \
	pr67590 \
	libffi-race-condition \
	cuda-float128 \
	t-libunwind-elf-Wl-z-defs \
	gcc-force-cross-layout \
	gcc-search-prefixed-as-ld \
	kfreebsd-decimal-float \
	pr87808 \
	pr94253 \
	gcc-arm-disable-guality-tests \
	musl-ssp \
	pr79724-revert \
	pr104290-followup \
	arc-stddef \
	libstdc++-hurd \
	pr107475 \
	pr93371 \
	libsanitizer-timebits \
	asan-allocator-base \
	gcc-vhdl \
	pr114533 \
  Adjust-generic-loop-alignment-from-16-11-8-to-16-for-Intel\

# with glibc (>= 2.31)
ifeq (,$(filter $(distrelease),wheezy jessie stretch buster precise xenial bionic))
  debian_patches += libsanitizer-no-crypt
endif

ifneq (,$(filter $(distrelease),precise xenial bionic focal groovy hirsute))
  debian_patches += pr100067-revert
endif

ifneq (,$(filter $(distrelease), jessie stretch buster bullseye precise trusty xenial bionic focal groovy hirsute))
  debian_patches += dwarf5-revert-default
  ifneq ($(GFDL_INVARIANT_FREE),yes)
    debian_patches += dwarf5-revert-default-doc
  endif
endif

ifeq (,$(filter $(distrelease),$(no_timet64_distreleases)))
  debian_patches += pr99832-distro
  debian_patches += pr114065-proposed
endif

# TODO:
#	pr81829 \

#	$(if $(filter yes, $(DEB_CROSS)),,gcc-print-file-name) \
#	libstdc++-nothumb-check \

hardening_patches =
ifneq (,$(filter $(derivative),Ubuntu))
  ifneq (,$(findstring gcc-12, $(PKGSOURCE)))
    hardening_patches += \
	gcc-distro-specs-ubuntu-doc \
	testsuite-hardening-format \
	testsuite-hardening-printf-types \
	testsuite-hardening-updates \
	testsuite-glibc-warnings
  endif
else ifneq (,$(filter $(derivative),Debian))
  ifneq (,$(findstring gcc-12, $(PKGSOURCE)))
#    ifneq ($(with_pie),yes)
#      hardening_patches += \
#        ignore-pie-specs-when-not-enabled
#    endif
  endif
endif

# FIXME 4.5: Drop and adjust symbols files
ifneq (,$(findstring 4.4, $(PKGSOURCE)))
  debian_patches += pr39491
endif

# Patches for non-core languages.

debian_patches += gm2 gm2-info-no-headers
ifeq ($(GFDL_INVARIANT_FREE),yes)
  debian_patches += gm2-texinfo
else
  debian_patches += gm2-doc
  debian_patches += gm2-makeinfo-force
endif

# Most of the time, it would be safe to apply them whether the
# language is selected or not. But when working on a new GCC version,
# it is convenient to concentrate on core languages, and refresh them
# later when working on the specific language.
ifeq ($(with_ada),yes)
    debian_patches += ada-gcc-name
    debian_patches += ada-verbose
  ifeq ($(biarch64),yes)
    debian_patches += ada-nobiarch-check
  endif
    debian_patches += ada-link-lib
    debian_patches += ada-gnattools-cross
    ifeq ($(with_gnatsjlj),yes)
      debian_patches += ada-sjlj
    endif
    debian_patches += ada-lib-info-source-date-epoch
    # FIXME: debian_patches += ada-749574
    debian_patches += ada-perl-shebang
endif

# FIXME: still relevant?
#	gdc-multiarch

ifeq ($(GFDL_INVARIANT_FREE),yes)
  debian_patches += gdc-texinfo
endif
ifeq (,$(filter $(DEB_TARGET_ARCH),amd64 i386 armhf))
  debian_patches += disable-gdc-tests
endif

debian_patches += alpha-ieee
ifneq ($(GFDL_INVARIANT_FREE),yes)
  debian_patches += alpha-ieee-doc
endif

# all patches below this line are applied for gcc-snapshot builds as well

ifneq (,$(findstring gcc-snapshot, $(PKGSOURCE)))
  debian_patches =
endif

debian_patches += \
	sys-auxv-header \
	gdc-dynamic-link-phobos \
	ia64-disable-selective-scheduling \
	libstdc++-pythondir \
	gcc-verbose-lto-link \

ifeq ($(with_ada),yes)
  debian_patches += \
	ada-armel-libatomic \
	ada-kfreebsd
endif

ifeq ($(with_ibm_branch),yes)
  debian_patches += ibm-branch
endif

ifeq ($(with_softfloat),yes)
  debian_patches += arm-multilib-soft-float
else ifeq ($(multilib),yes)
  ifneq (,$(biarchhfarchs)$(biarchsfarchs))
    ifneq (,$(filter $(distrelease), precise))
      debian_patches += arm-multilib-softfp$(if $(filter yes,$(DEB_CROSS)),-cross)
    else
      debian_patches += arm-multilib-soft$(if $(filter yes,$(DEB_CROSS)),-cross)
    endif
  endif
endif
ifneq (,$(filter $(distrelease), precise trusty xenial bionic focal groovy hirsute))
  debian_patches += arm-multilib-defaults
endif

ifeq ($(DEB_CROSS),yes)
  debian_patches += cross-fixes
  debian_patches += cross-install-location
  ifeq ($(with_m2),yes)
    debian_patches += cross-install-location-gm2
  endif
endif

ifeq ($(DEB_TARGET_ARCH_OS),hurd)
  debian_patches += hurd-changes
  # FIXME: #1005297, PR 104660
  debian_patches += libgo-hurd-hack
endif

debian_patches += gcc-ice-dump
debian_patches += gcc-ice-apport
debian_patches += skip-bootstrap-multilib
debian_patches += libffi-ro-eh_frame_sect

# sigaction on sparc changed between glibc 2.19 and 2.21
ifeq (,$(filter 2.1%, $(shell dpkg-query -l libc-bin | awk '/^.i/ {print $$3}')))
  # keep it, gets remove in GCC from time to time
  #debian_patches += pr67899
endif

debian_patches += gcc-multiarch
debian_patches += config-ml
ifneq ($(single_package),yes)
  ifeq ($(with_multiarch_cxxheaders),yes)
    debian_patches += g++-multiarch-incdir
    debian_patches += canonical-cpppath
  endif
endif
ifneq (,$(filter $(build_type), build-cross cross-build-cross))
  debian_patches += cross-no-locale-include
  debian_patches += cross-biarch
endif
debian_patches += gcc-multilib-multiarch

ifneq ($(trunk_build),yes)
ifneq (,$(filter $(derivative),Ubuntu))
  debian_patches += gcc-as-needed
  ifeq (,$(filter $(distrelease), precise trusty xenial))
    debian_patches += gcc-as-needed-gold
  endif
else # Debian
  ifeq (,$(filter $(distrelease), jessie stretch))
    debian_patches += gcc-as-needed gcc-as-needed-gold
  endif
endif
endif

debian_patches += libgomp-kfreebsd-testsuite
debian_patches += go-testsuite

# don't remove, this is regularly overwritten, see PR sanitizer/63958.
#debian_patches += libasan-sparc

# LoongArch backport.
debian_patches += \
    loong64/0001-loongarch-add-alternatives-for-idiv-insns-to-improve \
    loong64/0002-loongarch-avoid-unnecessary-sign-extend-after-32-bit \
    loong64/0003-LoongArch-Subdivision-symbol-type-add-SYMBOL_PCREL-s \
    loong64/0004-LoongArch-Support-split-symbol \
    loong64/0005-LoongArch-Modify-the-output-message-string-of-the-wa \
    loong64/0006-LoongArch-adjust-the-default-of-mexplicit-relocs-by- \
    loong64/0007-LoongArch-Define-the-macro-ASM_PREFERRED_EH_DATA_FOR \
    loong64/0008-LoongArch-Provide-fmin-fmax-RTL-pattern \
    loong64/0009-LoongArch-Get-__tls_get_addr-address-through-got-tab \
    loong64/0010-LoongArch-Add-support-code-model-extreme \
    loong64/0011-LoongArch-Add-new-code-model-medium \
    loong64/0012-LoongArch-Avoid-RTL-flag-check-failure-in-loongarch_ \
    loong64/0013-LoongArch-add-model-attribute \
    loong64/0014-LoongArch-testsuite-refine-__tls_get_addr-tests-with \
    loong64/0015-LoongArch-add-mdirect-extern-access-option \
    loong64/0016-LoongArch-Fix-pr106828-by-define-hook-TARGET_ASAN_SH \
    loong64/0017-LoongArch-Prepare-static-PIE-support \
    loong64/0018-LoongArch-Libitm-add-LoongArch-support \
    loong64/0019-LoongArch-Fixed-a-typo-in-the-comment-information-of \
    loong64/0020-LoongArch-Use-UNSPEC-for-fmin-fmax-RTL-pattern-PR105 \
    loong64/0021-LoongArch-Fixed-a-bug-in-the-loongarch-architecture- \
    loong64/0022-LoongArch-implement-count_-leading-trailing-_zeros \
    loong64/0023-Libvtv-Add-loongarch-support \
    loong64/0024-LoongArch-Add-fcopysign-instructions \
    loong64/0025-LoongArch-fix-signed-overflow-in-loongarch_emit_int_ \
    loong64/0026-LoongArch-Rename-frint_-fmt-to-rint-mode-2 \
    loong64/0027-LoongArch-Add-ftint-rm-rp-.-w-l-.-s-d-instructions \
    loong64/0028-LoongArch-Add-fscaleb.-s-d-instructions-as-ldexp-sf- \
    loong64/0029-LoongArch-Add-flogb.-s-d-instructions-and-expand-log \
    loong64/0030-LoongArch-Add-prefetch-instructions \
    loong64/0031-LoongArch-Optimize-immediate-load \
    loong64/0032-LoongArch-Optimize-the-implementation-of-stack-check \
    loong64/0033-LoongArch-Fixed-a-compilation-failure-with-c-in-inli \
    loong64/0034-LoongArch-Don-t-add-crtfastmath.o-for-shared \
    loong64/0035-LoongArch-Generate-bytepick.-wd-for-suitable-bit-ope \
    loong64/0036-LoongArch-Change-the-value-of-macro-TRY_EMPTY_VM_SPA \
    loong64/0037-LoongArch-testsuite-Disable-stack-protector-for-some \
    loong64/0038-LoongArch-Remove-the-definition-of-the-macro-LOGICAL \
    loong64/0039-LoongArch-Optimize-additions-with-immediates \
    loong64/0040-LoongArch-Improve-GAR-store-for-va_list \
    loong64/0041-LoongArch-Improve-cpymemsi-expansion-PR109465 \
    loong64/0042-LoongArch-Enable-shrink-wrapping \
    loong64/0043-LoongArch-Change-the-default-value-of-LARCH_CALL_RAT \
    loong64/0044-LoongArch-Set-default-alignment-for-functions-and-la \
    loong64/0045-libffi-Backport-of-LoongArch-support-for-libffi \
    loong64/0046-LoongArch-Remove-redundant-sign-extension-instructio \
    loong64/0047-LoongArch-Enable-free-starting-at-O2 \
    loong64/0048-LoongArch-Implement-128-bit-floating-point-functions \
    loong64/0049-LoongArch-Optimize-switch-with-sign-extended-index \
    loong64/0050-LoongArch-Support-storing-floating-point-zero-into-M \
    loong64/0051-LoongArch-improved-target-configuration-interface \
    loong64/0052-LoongArch-define-preprocessing-macros-__loongarch_-a \
    loong64/0053-LoongArch-add-new-configure-option-with-strict-align \
    loong64/0054-LoongArch-support-loongarch-elf-target \
    loong64/0055-LoongArch-initial-ada-support-on-linux \
    loong64/0056-LoongArch-Add-Loongson-SX-base-instruction-support \
    loong64/0057-LoongArch-Add-Loongson-SX-directive-builtin-function \
    loong64/0058-LoongArch-Add-Loongson-ASX-base-instruction-support \
    loong64/0059-LoongArch-Add-Loongson-ASX-directive-builtin-functio \
    loong64/0060-LoongArch-Use-bstrins-instruction-for-a-mask-and-a-m \
    loong64/0061-LoongArch-Adjust-C-multilib-header-layout \
    loong64/0062-LoongArch-Fix-unintentional-bash-ism-in-r14-3665 \
    loong64/0063-LoongArch-Enable-fsched-pressure-by-default-at-O1-an \
    loong64/0064-LoongArch-Use-LSX-and-LASX-for-block-move \
    loong64/0065-LoongArch-Slightly-simplify-loongarch_block_move_str \
    loong64/0066-LoongArch-Optimized-multiply-instruction-generation \
    loong64/0067-LoongArch-Fix-up-memcpy-vec-3.c-test-case \
    loong64/0068-LoongArch-Add-tests-of-mstrict-align-option \
    loong64/0069-LoongArch-Add-testsuite-framework-for-Loongson-SX-AS \
    loong64/0070-LoongArch-Add-tests-for-Loongson-SX-builtin-function \
    loong64/0071-LoongArch-Add-tests-for-SX-vector-floating-point-ins \
    loong64/0072-LoongArch-Add-tests-for-SX-vector-addition-instructi \
    loong64/0073-LoongArch-Add-tests-for-SX-vector-subtraction-instru \
    loong64/0074-LoongArch-Add-tests-for-SX-vector-addition-vsadd-ins \
    loong64/0075-LoongArch-Add-tests-for-the-SX-vector-multiplication \
    loong64/0076-LoongArch-Add-tests-for-SX-vector-vavg-vavgr-instruc \
    loong64/0077-LoongArch-Add-tests-for-SX-vector-vmax-vmaxi-vmin-vm \
    loong64/0078-LoongArch-Add-tests-for-SX-vector-vexth-vextl-vldi-v \
    loong64/0079-LoongArch-Add-tests-for-SX-vector-vabsd-vmskgez-vmsk \
    loong64/0080-LoongArch-Add-tests-for-SX-vector-vdiv-vmod-instruct \
    loong64/0081-LoongArch-Add-tests-for-SX-vector-vsll-vslli-vsrl-vs \
    loong64/0082-LoongArch-Add-tests-for-SX-vector-vrotr-vrotri-vsra- \
    loong64/0083-LoongArch-Add-tests-for-SX-vector-vssran-vssrani-vss \
    loong64/0084-LoongArch-Add-tests-for-SX-vector-vbitclr-vbitclri-v \
    loong64/0085-LoongArch-Add-tests-for-SX-vector-floating-point-ari \
    loong64/0086-LoongArch-Add-tests-for-SX-vector-vfrstp-vfrstpi-vse \
    loong64/0087-LoongArch-Add-tests-for-SX-vector-vfcmp-instructions \
    loong64/0088-LoongArch-Add-tests-for-SX-vector-handling-and-shuff \
    loong64/0089-LoongArch-Add-tests-for-SX-vector-vand-vandi-vandn-v \
    loong64/0090-LoongArch-Add-tests-for-SX-vector-vfmadd-vfnmadd-vld \
    loong64/0091-LoongArch-Add-tests-for-ASX-vector-xvadd-xvadda-xvad \
    loong64/0092-LoongArch-Add-tests-for-ASX-vector-xvhadd-xvhaddw-xv \
    loong64/0093-LoongArch-Add-tests-for-ASX-vector-subtraction-instr \
    loong64/0094-LoongArch-Add-tests-for-ASX-vector-xvmul-xvmod-xvdiv \
    loong64/0095-LoongArch-Add-tests-for-ASX-vector-xvmax-xvmaxi-xvmi \
    loong64/0096-LoongArch-Add-tests-for-ASX-vector-xvldi-xvmskgez-xv \
    loong64/0097-LoongArch-Add-tests-for-ASX-vector-xvand-xvandi-xvan \
    loong64/0098-LoongArch-Add-tests-for-ASX-vector-xvsll-xvsrl-instr \
    loong64/0099-LoongArch-Add-tests-for-ASX-vector-xvextl-xvsra-xvsr \
    loong64/0100-LoongArch-Add-tests-for-ASX-vector-xvbitclr-xvbitclr \
    loong64/0101-LoongArch-Add-tests-for-ASX-builtin-functions \
    loong64/0102-LoongArch-Add-tests-for-ASX-xvldrepl-xvstelm-instruc \
    loong64/0103-LoongArch-Add-tests-for-ASX-vector-floating-point-op \
    loong64/0104-LoongArch-Add-tests-for-ASX-vector-floating-point-co \
    loong64/0105-LoongArch-Add-tests-for-ASX-vector-comparison-and-se \
    loong64/0106-LoongArch-Add-tests-for-ASX-vector-xvfnmadd-xvfrstp- \
    loong64/0107-LoongArch-Add-tests-for-ASX-vector-xvabsd-xvavg-xvav \
    loong64/0108-LoongArch-Add-tests-for-ASX-vector-xvfcmp-caf-ceq-cl \
    loong64/0109-LoongArch-Add-tests-for-ASX-vector-xvfcmp-saf-seq-sl \
    loong64/0110-LoongArch-Add-tests-for-ASX-vector-xvext2xv-xvexth-x \
    loong64/0111-LoongArch-Add-tests-for-ASX-vector-xvpackev-xvpackod \
    loong64/0112-LoongArch-Add-tests-for-ASX-vector-xvssrln-xvssrlni- \
    loong64/0113-LoongArch-Add-tests-for-ASX-vector-xvssran-xvssrani- \
    loong64/0114-LoongArch-Fix-bug-of-optab-di3_fake \
    loong64/0115-LoongArch-Change-the-value-of-branch_cost-from-2-to- \
    loong64/0116-libsanitizer-add-LoongArch-support \
    loong64/0117-LoongArch-Fix-building-errors \
    loong64/0118-libjccjit-do-not-link-objects-contained-same-element \
    loong64/0119-LoongArch-Use-finer-grained-DBAR-hints \
    loong64/0120-LoongArch-Add-LA664-support \
    loong64/0121-LoongArch-Fix-internal-error-running-gcc-march-nativ \
    loong64/0122-LoongArch-Fix-lsx-vshuf.c-and-lasx-xvshuf_b.c-tests- \
    loong64/0123-LoongArch-Reimplement-multilib-build-option-handling \
    loong64/0124-LoongArch-Check-whether-binutils-supports-the-relax- \
    loong64/0125-Modify-gas-uleb128-support-test \
    loong64/0126-LoongArch-Optimizations-of-vector-construction \
    loong64/0127-LoongArch-Replace-UNSPEC_FCOPYSIGN-with-copysign-RTL \
    loong64/0128-LoongArch-Adjust-makefile-dependency-for-loongarch-h \
    loong64/0129-LoongArch-Enable-vect.exp-for-LoongArch.-PR111424 \
    loong64/0130-LoongArch-Delete-macro-definition-ASM_OUTPUT_ALIGN_W \
    loong64/0131-LoongArch-Fix-vec_initv32qiv16qi-template-to-avoid-I \
    loong64/0132-LoongArch-Use-fcmp.caf.s-instead-of-movgr2cf-for-zer \
    loong64/0133-LoongArch-Implement-avg-and-sad-standard-names \
    loong64/0134-LoongArch-Implement-vec_widen-standard-names \
    loong64/0135-LoongArch-Implement-the-new-vector-cost-model-framew \
    loong64/0136-LoongArch-Add-enum-style-mexplicit-relocs-option \
    loong64/0137-LoongArch-Use-explicit-relocs-for-GOT-access-when-me \
    loong64/0138-LoongArch-Use-explicit-relocs-for-TLS-access-with-me \
    loong64/0139-LoongArch-Use-explicit-relocs-for-addresses-only-use \
    loong64/0140-LoongArch-Fix-vfrint-releated-comments-in-lsxintrin. \
    loong64/0141-LoongArch-Enable-vcond_mask_mn-expanders-for-SF-DF-m \
    loong64/0142-LoongArch-Define-HAVE_AS_TLS-to-0-if-it-s-undefined- \
    loong64/0143-LoongArch-Fix-instruction-name-typo-in-lsx_vreplgr2v \
    loong64/0144-LoongArch-Use-simplify_gen_subreg-instead-of-gen_rtx \
    loong64/0145-LoongArch-Optimize-single-used-address-with-mexplici \
    loong64/0146-LoongArch-Disable-relaxation-if-the-assembler-don-t- \
    loong64/0147-LoongArch-Fix-scan-assembler-times-of-lasx-lsx-test- \
    loong64/0148-LoongArch-Increase-cost-of-vector-aligned-store-load \
    loong64/0149-LoongArch-Implement-C-LT-Z_DEFINED_VALUE_AT_ZERO \
    loong64/0150-LoongArch-Handle-vectorized-copysign-x-1-expansion-e \
    loong64/0151-LoongArch-Add-code-generation-support-for-call36-fun \
    loong64/0152-LoongArch-Implement-atomic-operations-using-LoongArc \
    loong64/0153-LoongArch-atomic_load-and-atomic_store-are-implement \
    loong64/0154-LoongArch-genopts-Add-infrastructure-to-generate-cod \
    loong64/0155-LoongArch-Add-evolution-features-of-base-ISA-revisio \
    loong64/0156-LoongArch-Take-the-advantage-of-mdiv32-if-it-s-enabl \
    loong64/0157-LoongArch-Don-t-emit-dbar-0x700-if-mld-seq-sa \
    loong64/0158-LoongArch-Add-fine-grained-control-for-LAM_BH-and-LA \
    loong64/0159-LoongArch-Fix-mexplict-relocs-none-mcmodel-medium-pr \
    loong64/0160-LoongArch-Fix-libgcc-build-failure-when-libc-is-not- \
    loong64/0161-LoongArch-Optimize-LSX-vector-shuffle-on-floating-po \
    loong64/0162-LoongArch-Optimize-the-loading-of-immediate-numbers- \
    loong64/0163-LoongArch-Fix-runtime-error-in-a-gcc-build-with-with \
    loong64/0164-LoongArch-Fix-usage-of-LSX-and-LASX-frint-ftint-inst \
    loong64/0165-LoongArch-Use-standard-pattern-name-and-RTX-code-for \
    loong64/0166-LoongArch-Use-standard-pattern-name-and-RTX-code-for \
    loong64/0167-LoongArch-Remove-lrint_allow_inexact \
    loong64/0168-LoongArch-Use-LSX-for-scalar-FP-rounding-with-explic \
    loong64/0169-LoongArch-Remove-duplicate-definition-of-CLZ_DEFINED \
    loong64/0170-LoongArch-Added-vectorized-hardware-inspection-for-t \
    loong64/0171-LoongArch-Accelerate-optimization-of-scalar-signed-u \
    loong64/0172-LoongArch-Optimize-vector-constant-extract-even-odd- \
    loong64/0173-LoongArch-Switch-loongarch-def-from-C-to-C-to-make-i \
    loong64/0174-LoongArch-Remove-the-definition-of-ISA_BASE_LA64V110 \
    loong64/0175-LoongArch-Add-support-for-xorsign \
    loong64/0176-LoongArch-Add-support-for-LoongArch-V1.1-approximate \
    loong64/0177-LoongArch-Use-standard-pattern-name-for-xvfrsqrt-vfr \
    loong64/0178-LoongArch-Redefine-pattern-for-xvfrecip-vfrecip-inst \
    loong64/0179-LoongArch-New-options-mrecip-and-mrecip-with-ffast-m \
    loong64/0180-LoongArch-Vectorized-loop-unrolling-is-disable-for-d \
    loong64/0181-LoongArch-Fix-lsx-vshuf.c-and-lasx-xvshuf_b.c-tests- \
    loong64/0182-LoongArch-Fix-ICE-and-use-simplify_gen_subreg-instea \
    loong64/0183-LoongArch-Fix-eh_return-epilogue-for-normal-returns \
    loong64/0184-LoongArch-Allow-mcmodel-extreme-and-model-attribute- \
    loong64/0185-LoongArch-Fix-warnings-building-libgcc \
    loong64/0186-LoongArch-testsuite-Remove-XFAIL-in-vect-ftint-no-in \
    loong64/0187-LoongArch-Include-rtl.h-for-COSTS_N_INSNS-instead-of \
    loong64/0188-LoongArch-Fix-instruction-costs-PR112936 \
    loong64/0189-LoongArch-Add-alslsi3_extend \
    loong64/0190-LoongArch-Add-support-for-D-frontend \
    loong64/0191-libruntime-Add-fiber-context-switch-code-for-LoongAr \
    loong64/0192-LoongArch-Fix-FP-vector-comparsons-PR113034 \
    loong64/0193-LoongArch-Use-force_reg-instead-of-gen_reg_rtx-emit_ \
    loong64/0194-LoongArch-Clean-up-vec_init-expander \
    loong64/0195-LoongArch-Fix-incorrect-code-generation-for-sad-patt \
    loong64/0196-LoongArch-Modify-the-check-type-of-the-vector-builti \
    loong64/0197-LoongArch-Implement-FCCmode-reload-and-cstore-ANYF-m \
    loong64/0198-LoongArch-Add-sign_extend-pattern-for-32-bit-rotate- \
    loong64/0199-LoongArch-Fixed-bug-in-bstrins_-mode-_for_ior_mask-t \
    loong64/0200-LoongArch-Fix-insn-output-of-vec_concat-templates-fo \
    loong64/0201-LoongArch-Fix-ICE-when-passing-two-same-vector-argum \
    loong64/0202-LoongArch-Expand-left-rotate-to-right-rotate-with-ne \
    loong64/0203-LoongArch-Fix-infinite-secondary-reloading-of-FCCmod \
    loong64/0204-LoongArch-Replace-mexplicit-relocs-auto-simple-used- \
    loong64/0205-LoongArch-Fix-the-format-of-bstrins_-mode-_for_ior_m \
    loong64/0206-LoongArch-Added-TLS-Le-Relax-support \
    loong64/0207-LoongArch-Provide-fmin-fmax-RTL-pattern-for-vectors \
    loong64/0208-LoongArch-Merge-constant-vector-permuatation-impleme \
    loong64/0209-LoongArch-testsuite-Fix-FAIL-in-lasx-xvstelm.c-file \
    loong64/0210-LoongArch-testsuite-Modify-the-test-behavior-of-the- \
    loong64/0211-LoongArch-testsuite-Delete-the-default-run-behavior- \
    loong64/0212-LoongArch-testsuite-Added-additional-vectorization-m \
    loong64/0213-LoongArch-testsuite-Give-up-the-detection-of-the-gcc \
    loong64/0214-LoongArch-Fixed-the-problem-of-incorrect-judgment-of \
    loong64/0215-LoongArch-Improve-lasx_xvpermi_q_-LASX-mode-insn-pat \
    loong64/0216-LoongArch-Implement-vec_init-M-N-where-N-is-a-LSX-ve \
    loong64/0217-LoongArch-Handle-ISA-evolution-switches-along-with-o \
    loong64/0218-LoongArch-Rename-ISA_BASE_LA64V100-to-ISA_BASE_LA64 \
    loong64/0219-LoongArch-Use-enums-for-constants \
    loong64/0220-LoongArch-Simplify-mexplicit-reloc-definitions \
    loong64/0221-LoongArch-testsuite-Add-loongarch-support-to-slp-21. \
    loong64/0222-LoongArch-Optimized-some-of-the-symbolic-expansion-i \
    loong64/0223-LoongArch-Implement-option-save-restore \
    loong64/0224-LoongArch-Redundant-sign-extension-elimination-optim \
    loong64/0225-LoongArch-Redundant-sign-extension-elimination-optim \
    loong64/0226-LoongArch-Assign-the-u-attribute-to-the-mem-to-which \
    loong64/0227-LoongArch-testsuite-Fix-fail-in-gen-vect-2-25-.c-fil \
    loong64/0228-LoongArch-Remove-constraint-z-from-movsi_internal \
    loong64/0229-LoongArch-Disable-explicit-reloc-for-TLS-LD-GD-with- \
    loong64/0230-LoongArch-testsuite-Disable-stack-protector-for-got- \
    loong64/0231-LoongArch-Disable-TLS-type-symbols-from-generating-n \
    loong64/0232-LoongArch-Remove-vec_concatz-mode-pattern \
    loong64/0233-LoongArch-Optimize-implementation-of-single-precisio \
    loong64/0234-LoongArch-Define-LOGICAL_OP_NON_SHORT_CIRCUIT \
    loong64/0235-LoongArch-Split-vec_selects-of-bottom-elements-into- \
    loong64/0236-LoongArch-Modify-the-address-calculation-logic-for-o \
    loong64/0237-LoongArch-Merge-template-got_load_tls_-ld-gd-le-ie \
    loong64/0238-LoongArch-Add-the-macro-implementation-of-mcmodel-ex \
    loong64/0239-LoongArch-Enable-explicit-reloc-for-extreme-TLS-GD-L \
    loong64/0240-LoongArch-Added-support-for-loading-__get_tls_addr-s \
    loong64/0241-LoongArch-Don-t-split-the-instructions-containing-re \
    loong64/0242-LoongArch-Adjust-cost-of-vector_stmt-that-match-mult \
    loong64/0243-LoongArch-Fix-incorrect-return-type-for-frecipe-frsq \
    loong64/0244-LoongArch-Fix-an-ODR-violation \
    loong64/0245-LoongArch-testsuite-Fix-gcc.dg-vect-vect-reduc-mul_- \
    loong64/0246-LoongArch-Avoid-out-of-bounds-access-in-loongarch_sy \
    loong64/0247-LoongArch-Fix-wrong-LSX-FP-vector-negation \
    loong64/0248-LoongArch-Fix-wrong-return-value-type-of-__iocsrrd_h \
    loong64/0249-LoongArch-Remove-redundant-symbol-type-conversions-i \
    loong64/0250-LoongArch-When-checking-whether-the-assembler-suppor \
    loong64/0251-LoongArch-Don-t-falsely-claim-gold-supported-in-topl \
    loong64/0252-LoongArch-NFC-Deduplicate-crc-instruction-defines \
    loong64/0253-LoongArch-Remove-unneeded-sign-extension-after-crc-c \
    loong64/0254-LoongArch-Allow-s9-as-a-register-alias \
    loong64/0255-LoongArch-testsuite-Rewrite-x-vfcmp-d-f-.c-to-avoid- \
    loong64/0256-LoongArch-Use-lib-instead-of-lib64-as-the-library-se \
    loong64/0257-LoongArch-testsuite-Fix-problems-with-incorrect-resu \
    loong64/0258-LoongArch-Fixed-an-issue-with-the-implementation-of- \
    loong64/0259-LoongArch-testsuite-Add-compilation-options-to-the-r \
    loong64/0260-LoongArch-Emit-R_LARCH_RELAX-for-TLS-IE-with-non-ext \
    loong64/0261-LoongArch-Remove-unused-and-incorrect-sge-u-_-X-mode \
    loong64/0262-LoongArch-Remove-masking-process-for-operand-3-of-xv \
    loong64/0263-LoongArch-Fix-C23-.-functions-returning-large-aggreg \
    loong64/0264-LoongArch-Remove-unused-useless-definitions \
    loong64/0265-LoongArch-Change-loongarch_expand_vec_cmp-s-return-t \
    loong64/0266-LoongArch-Combine-UNITS_PER_FP_REG-and-UNITS_PER_FPR \
    loong64/0267-LoongArch-Fix-a-typo-PR-114407 \
    loong64/0268-testsuite-Add-a-test-case-for-negating-FP-vectors-co \
    loong64/0269-LoongArch-Split-loongarch_option_override_internal-i \
    loong64/0270-LoongArch-Regenerate-loongarch.opt.urls \
    loong64/0271-LoongArch-Add-support-for-TLS-descriptors \
    loong64/0272-LoongArch-Fix-missing-plugin-header \
    loong64/0273-LoongArch-Remove-unused-code \
    loong64/0274-LoongArch-Set-default-alignment-for-functions-jumps- \
    loong64/0275-LoongArch-Enable-switchable-target \
    loong64/0276-LoongArch-Define-ISA-versions \
    loong64/0277-LoongArch-Define-builtin-macros-for-ISA-evolutions \
    loong64/0278-LoongArch-Add-constraints-for-bit-string-operation-d \
    loong64/0279-LoongArch-Guard-REGNO-with-REG_P-in-loongarch_expand \
    loong64/0280-LoongArch-Fix-mode-size-comparision-in-loongarch_exp \
    loong64/0281-LoongArch-Use-bstrins-for-value-1u-const \
    loong64/0282-LoongArch-Tweak-IOR-rtx_cost-for-bstrins \
    loong64/0283-LoongArch-NFC-Dedup-and-sort-the-comment-in-loongarc \
    loong64/0284-LoongArch-Fix-explicit-relocs-extreme-tls-desc.c-tes \
    loong64/0285-LoongArch-Define-loongarch_insn_cost-and-set-the-cos \
    loong64/0286-LoongArch-TFmode-is-not-allowed-to-be-stored-in-the- \
    loong64/0287-LoongArch-Remove-unreachable-codes \
    loong64/0288-LoongArch-Organize-the-code-related-to-split-move-an \
    loong64/0289-LoongArch-Expand-some-SImode-operations-through-si3_ \
    loong64/0290-LoongArch-Relax-ins_zero_bitmask_operand-and-remove- \
    loong64/0291-LoongArch-Rework-bswap-hi-si-di-2-definition \
    loong64/0292-testsuite-fix-dg-do-preprocess-typo \
    loong64/0293-LoongArch-Remove-gawk-extension-from-a-generator-scr \
    loong64/0294-LoongArch-Use-iorn-and-andn-standard-pattern-names \
    loong64/0295-LoongArch-Drop-vcond-u-expanders \
    loong64/0296-LoongArch-Provide-ashr-lshr-and-ashl-RTL-pattern-for \
    loong64/0297-LoongArch-Implement-scalar-isinf-isnormal-and-isfini \
    loong64/0298-LoongArch-Add-support-to-annotate-tablejump \
    loong64/0299-LoongArch-Fix-up-r15-4130 \
    loong64/0300-libphobos-Update-build-scripts-for-LoongArch64 \
    loong64/0301-LoongArch-fix-building-errors \
    loong64/libsanitizer-Fix-errors-on-LoongArch \
    loong64/except-Don-t-use-the-cached-value-of-the-gcc_except_


# RISCV backport.
debian_patches += riscv64-inline-subword-atomic
debian_patches += riscv64-atomic-fix
debian_patches += riscv-add-minimal-support-for-zicbo-mzp
debian_patches += riscv-cache-management-operation-instructions
debian_patches += riscv-cache-management-operation-instructions-testcases
debian_patches += riscv-fix-a-bug-that-is-the-cmo-builtins

# sw64 support
ifeq ($(DEB_TARGET_ARCH), sw64)
	debian_patches += sw64/0001-feat-add-sw64-support \
		  sw64/0002-SW_64-treat-mcpu-native-default-as-mcpu-sw6b \
		  sw64/0003-SW_64-Fix-a-FAIL-in-libgomp-caused-by-the-atomic_exc
endif

series_stamp = $(stampdir)/02-series-stamp
series: $(series_stamp)
$(series_stamp):
	echo $(strip $(addsuffix .diff,$(debian_patches))) \
	  | sed -r 's/  +/ /g' | tr " " "\n" > $(series_file)
ifneq (,$(strip $(hardening_patches)))
  ifneq ($(trunk_build),yes)
	echo $(strip $(addsuffix .diff,$(hardening_patches))) \
	  | sed -r 's/  +/ /g' | tr " " "\n" >> $(series_file)
  endif
endif
	sed -r 's/(.)$$/\1 -p1/' -i $(series_file)
	touch $@

autoconf_files = $(shell lsdiff --no-filename $(foreach patch,$(debian_patches),$(patchdir)/$(patch).diff) \
	    | sed -rn '/(configure\.ac|acinclude.m4)$$/s:[^/]+/src/:src/:p' | sort -u)
autoconf_dirs = $(sort $(dir $(autoconf_files)))

automake_files = $(addprefix ./, $(filter-out none, \
	  $(shell lsdiff --no-filename $(foreach patch,$(debian_patches),$(patchdir)/$(patch).diff) \
	    | sed -rn '/Makefile\.(am|in)$$/s:[^/]+/src/:src/:p' | sort -u)))

autoconf_version = 2.69
ifneq (,$(filter $(distrelease),stretch buster trusty xenial bionic focal groovy))
  autoconf_version =
endif
ifeq ($(trunk_build),yes)
  # The actual version depends on the build-dependencies set by
  # variable AUTO_BUILD_DEP in rules.conf.  Here, we assume the
  # correct version is installed.
  #autoconf_version =
endif

# FIXME: the auto* stuff is done every time for every subdir, which
# leads to build errors. Idea: record the auto* calls in the patch
# files (AUTO <dir> <auto-command with options>) and run them separately,
# maybe only once per directory).
$(patch_stamp): $(unpack_stamp) $(series_stamp)
	sync
	QUILT_PATCHES=$(patchdir) QUILT_PATCH_OPTS='-E' \
	  quilt --quiltrc /dev/null push -a || test $$? = 2

	: # only needed when we have changes, and currently fails with autogen 5.18
	: #cd $(srcdir)/fixincludes && ./genfixes

	sync
	echo -n $(autoconf_dirs) | xargs -d ' ' -L 1 -P $(USE_CPUS) -I{} \
	  sh -c 'echo "Running autoconf$(autoconf_version) in {}..." ; \
	  cd $(CURDIR)/{} && rm -f configure && \
	  AUTOM4TE=/usr/bin/autom4te$(autoconf_version) autoconf$(autoconf_version)'

	for i in $(debian_patches) $(hardening_patches); do \
	  echo -e "\n$$i:" >> pxxx; \
	  sed -n 's/^# *DP: */  /p' $(patchdir)/$$i.diff >> pxxx; \
	done
#	-$(srcdir)/move-if-change pxxx $@

	: # generate the distro-defaults.h header
	rm -f $(srcdir)/gcc/distro-defaults.h
	( \
	  echo '/* distro specific configuration injected by the distro build.  */'; \
	  echo ''; \
	  echo '#ifndef ACCEL_COMPILER' \
	) >> $(srcdir)/gcc/distro-defaults.h
ifeq ($(with_async_unwind),yes)
	echo '#define DIST_DEFAULT_ASYNC_UNWIND 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
endif
ifeq ($(with_ssp)-$(with_ssp_default),yes-yes)
	echo '#define DIST_DEFAULT_SSP 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
  ifeq (,$(filter $(distrelease), precise trusty))
	echo '#define DIST_DEFAULT_SSP_STRONG 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
  endif
	echo '#define DIST_DEFAULT_FORMAT_SECURITY 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
endif
ifneq (,$(filter $(derivative),Ubuntu))
  ifneq (,$(filter $(distrelease),lucid precise trusty xenial bionic focal jammy kinetic lunar mantic))
	( \
	  echo '#define DIST_DEFAULT_FORTIFY_SOURCE 2'; \
	  echo '#define DIST_DEFAULT_FORTIFY_SOURCE_S "2"' \
	) >> $(srcdir)/gcc/distro-defaults.h
  else
	( \
	  echo '#define DIST_DEFAULT_FORTIFY_SOURCE 3'; \
	  echo '#define DIST_DEFAULT_FORTIFY_SOURCE_S "3"' \
	) >> $(srcdir)/gcc/distro-defaults.h
  endif
	echo '#define DIST_DEFAULT_RELRO 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
	echo '#define DIST_DEFAULT_BIND_NOW 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
  ifneq (,$(findstring gcc-12, $(PKGSOURCE)))
# FIXME: this is directly patched
#	echo '#define DIST_DEFAULT_FORTIFY_SOURCE 1' \
#	     >> $(srcdir)/gcc/distro-defaults.h
  endif
  ifeq ($(with_stack_clash),yes)
	echo '#define DIST_DEFAULT_STACK_CLASH 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
  endif
  ifeq ($(with_cf_protection),yes)
	echo '#define DIST_DEFAULT_CF_PROTECTION 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
  endif
else ifneq (,$(filter $(derivative),Debian))
  ifneq (,$(findstring gcc-12, $(PKGSOURCE)))
  endif
endif
ifeq ($(with_timet64),yes)
	echo '#define DIST_DEFAULT_TIMET64 1' \
	     >> $(srcdir)/gcc/distro-defaults.h
endif
	  echo '#endif' \
	     >> $(srcdir)/gcc/distro-defaults.h

	mv pxxx $@

unpatch:
	QUILT_PATCHES=$(patchdir) \
	  quilt --quiltrc /dev/null pop -a -R || test $$? = 2
	rm -rf .pc

update-patches: $(series_stamp)
	export QUILT_PATCHES=$(patchdir); \
	export QUILT_REFRESH_ARGS="--no-timestamps --no-index -pab"; \
	export QUILT_DIFF_ARGS="--no-timestamps --no-index -pab"; \
	while quilt push; do quilt refresh; done

patch: $(patch_stamp)
.PHONY: patch series quilt autotools
